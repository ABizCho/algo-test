//BST를 이용한 이진탐색 구현방법

//	이진트리를 이용해 구현한다.
/*
	BST

		BST 특징 :
			1. 이진탐색이므로, 정렬된 상태를 유지함,
				-> 이를 위해, currNode를 기준으로, leftChild엔 작은 값, rightChild엔 큰 값을 저장, 유지

			2. 이진탐색이므로 일반적으로 탐색 시 O(logN)
				but, 요소가 정렬된 순서로 삽입될 시, 편향트리가 만들어져 N의 높이를 가짐
				=> 높이만큼 탐색하므로, 최악 O(N)의 시간복잡도 발생 가능성 존재.
				
					=> 대안 -> AVL, 레드블랙트리

		
		BST 메서드:
			BST 삽입:	currNode와의 대소비교를 통해 자리를 찾아감
			BST 삭제:	
					case1) 삭제할 노드의 자식노드가 없는 경우, 즉 leafNode인 경우
						: 단순히 부모노드와의 연결을 끊어주면 됨.

					case2) 삭제할 노드에 한쪽의 자식노드(서브트리)만 있는 경우
						: 삭제할 노드의 부모노드에 자식노드를 연결시키면 됨.

					case3) 삭제할 노드가 양쪽의 자식노드(서브트리)를 가진 경우 
						: left 서브트리의 최댓값 or right 서브트리의 최솟값 (즉, 부모노드와 가장 가까운 값)
							을 삭제대상노드의 자리에 넣어준다. 즉, 삭제대상노드의 부모노드에 해당 노드를 연결한다.
				
*/

